package gw.surepath.cc.configuration.activitymanagement.plugin

uses gw.api.locale.DisplayKey
uses gw.plugin.InitializablePlugin
uses gw.plugin.messaging.MessageTransport
uses gw.surepath.cc.configuration.activitymanagement.api.ActivityAPIUtil
uses gw.surepath.cc.configuration.activitymanagement.util.ActivityManagementProperties
uses gw.surepath.suite.configuration.annotation.IncludeInDocumentation
uses gw.surepath.suite.integration.logging.StructuredLogger

/**
 * Activity Management: Handles ActivityPattern messages
 */
@IncludeInDocumentation
class CrossAppActivityTransport implements MessageTransport, InitializablePlugin {

  public static final var DEST_ID : int = 11

  public static final var EVENT_PC_ACTPATTERN_ADDED_SP : String = "SP_PC_ActPatternAdded"
  public static final var EVENT_PC_ACTPATTERN_UPDATED_SP : String = "SP_PC_ActPatternUpdated"
  public static final var EVENT_PC_ACTPATTERN_REMOVED_SP : String = "SP_PC_ActPatternRemoved"
  public static final var EVENT_BC_ACTPATTERN_ADDED_SP : String = "SP_BC_ActPatternAdded"
  public static final var EVENT_BC_ACTPATTERN_UPDATED_SP : String = "SP_BC_ActPatternUpdated"
  public static final var EVENT_BC_ACTPATTERN_REMOVED_SP : String = "SP_BC_ActPatternRemoved"
  private var _maxRetryCount : Integer
  private var _retryDelayMultiplier : Integer

  private static var _logger = StructuredLogger.CONFIG.createSubcategoryLogger(DisplayKey.get("SP.ActivityManagement.Logger.SharedActivities"))
  private static var _maxRetryParamName = "maxRetries"
  private static var _retryDelayMultiplierParamName = "retryDelayMultiplier"

  /**
   * Handles the messages and associated events generated by the ActivityPattern entity.
   * @param message
   * @param transformedPayload
   */
  @IncludeInDocumentation
  override function send(message : Message, transformedPayload : String) {
    if (ActivityManagementProperties.INSTANCE.FeatureEnabled and ActivityManagementProperties.INSTANCE.SharedActivitiesEnabled) {
      _logger.info("Cross App Activity Integration Event: ${message.MessageRoot} - ${message.EventName}")
      try {
        var activityPattern = message.MessageRoot as ActivityPattern
        switch (message.EventName) {
          case EVENT_PC_ACTPATTERN_ADDED_SP:
            new ActivityAPIUtil().handleCreatedActivityPattern(activityPattern.Code, activityPattern.Subject, false, true)
            break
          case EVENT_PC_ACTPATTERN_UPDATED_SP:
            new ActivityAPIUtil().handleUpdatedActivityPattern(activityPattern.Code, activityPattern.Subject, false, true)
            break
          case EVENT_PC_ACTPATTERN_REMOVED_SP:
            var removeFromPolicyCenter = not activityPattern.Retired and not activityPattern.PCGenerationAllowed_SP
            new ActivityAPIUtil().handleRemovedActivityPattern(activityPattern.Code, false, removeFromPolicyCenter)
            break
          case EVENT_BC_ACTPATTERN_ADDED_SP:
            new ActivityAPIUtil().handleCreatedActivityPattern(activityPattern.Code, activityPattern.Subject, true, false)
            break
          case EVENT_BC_ACTPATTERN_UPDATED_SP:
            new ActivityAPIUtil().handleUpdatedActivityPattern(activityPattern.Code, activityPattern.Subject, true, false)
            break
          case EVENT_BC_ACTPATTERN_REMOVED_SP:
            var removeFromBillingCenter = not activityPattern.Retired and not activityPattern.BCGenerationAllowed_SP
            new ActivityAPIUtil().handleRemovedActivityPattern(activityPattern.Code, removeFromBillingCenter, false)
            break
          default:
            _logger.warn("Invalid EventName provided for message transport; ignoring this message entirely", CrossAppActivityTransport#send(Message, String))
        }
        message.reportAck()
      } catch (ex : Exception) {
        handleError(ex, message)
      }
    }
  }

  /**
   * Shuts down the CrossAppActivityTransport
   */
  @IncludeInDocumentation
  override function shutdown() {
    _logger.info("Shutting down ${CrossAppActivityTransport.Name}")
  }

  /**
   * Suspends the CrossAppActivityTransport
   */
  @IncludeInDocumentation
  override function suspend() {
    _logger.info("Suspending ${CrossAppActivityTransport.Name}")
  }

  /**
   * Resumes the CrossAppActivityTransport
   */
  @IncludeInDocumentation
  override function resume() {
    _logger.info("Resuming ${CrossAppActivityTransport.Name}")
  }

  /**
   * Property sets the DestinationID
   * @param destinationID
   */
  @IncludeInDocumentation
  override property set DestinationID(destinationID : int) {
    _logger.info("Setting Destination ID for ${CrossAppActivityTransport.Name}", {destinationID})
  }

  /**
   * Handles errors which occurred during message send
   * @param error the error which occurred
   * @param message the message to send
   */
  @IncludeInDocumentation
  private function handleError(exception : Exception, message : Message) {
    _logger.warn(exception.Message, CrossAppActivityTransport#send(Message, String), exception, {message})
    message.ErrorDescription = exception.Message
    if (message.RetryCount > _maxRetryCount) {
      _logger.error("${message.MessageRoot} - ${message.EventName} Record failed to send", CrossAppActivityTransport#send(Message, String), exception, {message})
      message.reportError(ErrorCategory.TC_CROSSAPPACTPAT_ERR_SP)
    } else {
      var retryTime = Date.CurrentDate.addMinutes(message.RetryCount * _retryDelayMultiplier)
      message.reportError(retryTime)
      _logger.warn("Message automatically set to retry", CrossAppActivityTransport#send(Message, String),
          exception, {message})
    }
  }

  /**
   * Sets internal parameters defined in the plugin
   * @param map map of parameters to set
   */
  @IncludeInDocumentation
  override property set Parameters(map : Map) {
    var maxRetries = map.get(_maxRetryParamName) as String
    if (maxRetries != null and maxRetries.Numeric) {
      _maxRetryCount = Integer.parseInt(maxRetries)
    } else {
      _maxRetryCount = 3
    }
    var retryMiltiplier = map.get(_retryDelayMultiplierParamName) as String
    if (retryMiltiplier != null and retryMiltiplier.Numeric) {
      _retryDelayMultiplier = Integer.parseInt(retryMiltiplier)
    } else {
      _retryDelayMultiplier = 5
    }
  }

}