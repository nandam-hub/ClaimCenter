!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i=t();for(var s in i)("object"==typeof exports?exports:e)[s]=i[s]}}(self,()=>(()=>{"use strict";var e,t,i,s,n={d:(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};n.r(r),n.d(r,{GwCrossOriginExternal:()=>o}),function(e){e[e.SET_VALUES=0]="SET_VALUES",e[e.GET_VALUES=1]="GET_VALUES",e[e.FIRE_ACTION=2]="FIRE_ACTION",e[e.NON_BLOCKING_SERVER_REQUEST=3]="NON_BLOCKING_SERVER_REQUEST",e[e.BROADCAST_CROSS_ORIGIN_EVENT=4]="BROADCAST_CROSS_ORIGIN_EVENT",e[e.ADD_CROSS_ORIGIN_EVENT_LISTENER=5]="ADD_CROSS_ORIGIN_EVENT_LISTENER",e[e.REMOVE_CROSS_ORIGIN_EVENT_LISTENER=6]="REMOVE_CROSS_ORIGIN_EVENT_LISTENER"}(e||(e={})),function(e){e[e.VALUES=0]="VALUES",e[e.RESPONSE_FROM_NON_BLOCKING_SERVER_REQUEST=1]="RESPONSE_FROM_NON_BLOCKING_SERVER_REQUEST",e[e.CONFIRMATION_ONLY=2]="CONFIRMATION_ONLY",e[e.RECEIVE_CROSS_ORIGIN_EVENT=3]="RECEIVE_CROSS_ORIGIN_EVENT",e[e.RECEIVE_GW_NOTIFICATION=4]="RECEIVE_GW_NOTIFICATION"}(t||(t={})),function(e){e[e.LOCALE_CHANGED=0]="LOCALE_CHANGED",e[e.THEME_CHANGED=1]="THEME_CHANGED",e[e.GENERAL=2]="GENERAL"}(i||(i={})),function(e){e[e.SUCCEEDED=0]="SUCCEEDED",e[e.WARNING=1]="WARNING",e[e.FAILED=2]="FAILED",e[e.PENDING=3]="PENDING",e[e.NONE=4]="NONE"}(s||(s={}));class o{static nextMessageId=1e3;static initialized=!1;static originForGwApp;static messagesAwaitingResponse={};static crossOriginEventCallbackByBroadcasterThenEvent={};static gwNotificationListeners={};static allowListedDomains={};static ownerWindow;static messageEventListener;constructor(){throw new Error("Static class. Use GwCrossOriginExternal.init()")}static init(e,t,i){this.ownerWindow=i||window.parent,this.allowListedDomains=t,this.originForGwApp=e,this.initialized=!0,this.messageEventListener=this.receiveMessageFromGwApp.bind(this),window.addEventListener("message",this.messageEventListener,!1)}static isInitialized(){return this.initialized}static kill(){this.initialized=!1,this.originForGwApp=void 0,this.messageEventListener&&(this.ownerWindow.removeEventListener("message",this.messageEventListener,!1),this.messageEventListener=void 0)}static throwIfUntrustedOrigin(e){if(this.ownerWindow!==e.source||this.originForGwApp!==e.origin)throw new Error("Received untrusted message from origin: "+e.origin);if(e.data.gwNonGwOriginIfAny&&"*"!==this.allowListedDomains&&!this.allowListedDomains[e.data.gwNonGwOriginIfAny])throw new Error("Received message from trusted GW Application origin, but from an originating origin not on the allow list.")}static receiveMessageFromGwApp(e){if(!this.initialized)return;this.throwIfUntrustedOrigin(e);const i=e.data;switch(i.gwMessageType){case t.VALUES:this.receiveValuesMessage(i);break;case t.RESPONSE_FROM_NON_BLOCKING_SERVER_REQUEST:this.receiveNonBlockingServerRequestReponseMessage(i);break;case t.CONFIRMATION_ONLY:this.receiveConfirmationOnlyMessage(i);break;case t.RECEIVE_CROSS_ORIGIN_EVENT:this.receiveCrossOriginEvent(i);break;case t.RECEIVE_GW_NOTIFICATION:this.receiveGwNotification(i);break;default:this.receiveNonConformingMessageTypeFromGwApp(e)}}static getAwaitingInfoForCorrespondingMessageData(e){const t=e.gwResponseToMessageId;if(!t&&0!==t)return console.error("Received values payload with no responseToMessageId identifier: ",e),null;const i=this.messagesAwaitingResponse[t];return window.GwTestEnv?i:i||(console.error("Received values payload with a responseToMessageId: "+t+". But could not locate a corresponding Promise. Data: ",e),null)}static receiveMessage(e){const t=e.gwPayload,i=e.gwStatus,n=this.getAwaitingInfoForCorrespondingMessageData(e);if(!n)return;const r=i===s.FAILED?n.reject:n.fulfill;r&&r(t)}static receiveNonBlockingServerRequestReponseMessage(e){this.receiveMessage(e)}static receiveValuesMessage(e){this.receiveMessage(e)}static receiveConfirmationOnlyMessage(e){this.receiveMessage(e)}static receiveCrossOriginEvent(e){const t=e.gwPayload,i=this.crossOriginEventCallbackByBroadcasterThenEvent[t.broadcasterWindowId];if(!i)return void console.warn("Received cross origin event from a broadcast window not currently being listened to.");const s=i[t.eventName]||i["*"];s||console.warn("Received cross origin event for an event type without a registered callback: "+t.broadcasterWindowId+":"+t.eventName),s(t)}static receiveGwNotification(e){const t=e.gwPayload,i=this.gwNotificationListeners[t.type];i&&i(t)}static receiveNonConformingMessageTypeFromGwApp(e){const t=this[e.data.gwMessageType];"function"!=typeof t?console.warn("--- Received MessageEvent from GwApp without a gwMessageType that matched a method on GwCrossOriginExternal.\n--- This is likely an Error.\n--- However, receiveNonConformingMessageTypeFromGwApp can be overridden in GwCrossOriginExternal.\n--- This allows custom logic based on any MessageEvent that does not implement GwMessageEvent. But consider MessageType.FIRE_CUSTOM_EVENT instead."):this[t](e)}static sendMessage(e,t,i=null){if(!this.ownerWindow)return Promise.reject(new Error("Attempting to send a message to a null GwApp window. Ensure that this window was spawned by a Guidwire Application."));const n=this.nextMessageId++,r={gwMessageType:e,gwPayload:t,gwStatus:s.PENDING,gwMessageId:n,gwResponseToMessageId:i},o={messageId:n,timestamp:window.performance.now()};this.messagesAwaitingResponse[n]=o;try{const e=new Promise((e,t)=>{o.fulfill=e,o.reject=t});return this.ownerWindow.postMessage(r,this.originForGwApp),e}catch(e){return Promise.reject(e)}}static setValues(t){return this.sendMessage(e.SET_VALUES,t)}static getValues(t){return this.sendMessage(e.GET_VALUES,t)}static fireActionOnServer(t){return this.sendMessage(e.FIRE_ACTION,t)}static makeNonBlockingServerRequest(t){return this.sendMessage(e.NON_BLOCKING_SERVER_REQUEST,t)}static addCrossOriginEventListener(t,i,s){let n=this.crossOriginEventCallbackByBroadcasterThenEvent[t]=this.crossOriginEventCallbackByBroadcasterThenEvent[t]||{};return n["*"]?Promise.reject(new Error("There is already an 'all' listener (`*`) for this broadcaster. Remove it before adding any other listeners: "+t+":"+i)):n[i]?Promise.reject(new Error("Cannot register multiple callbacks for the same broadcaster and event: "+t+":"+i)):("*"===i&&Object.keys(n).length>0&&(console.warn("Adding an 'all' listener of '*' to a broadcaster that already has more specific listener. All specific listeners will be removed. In order to avoid this warning, remove known listeners manually before adding."),n=this.crossOriginEventCallbackByBroadcasterThenEvent[t]={}),n[i]=s,this.sendMessage(e.ADD_CROSS_ORIGIN_EVENT_LISTENER,{broadcasterWindowName:t,eventName:i}))}static removeCrossOriginEventListener(t,i){const s=this.crossOriginEventCallbackByBroadcasterThenEvent[t];return s&&("*"===i?delete this.crossOriginEventCallbackByBroadcasterThenEvent[t]:delete s[i]),this.sendMessage(e.REMOVE_CROSS_ORIGIN_EVENT_LISTENER,{broadcasterWindowName:t,eventName:i})}static broadcastCrossOriginEvent(t,i){return 0===t.length||"*"===t?Promise.reject(new Error("Illegal eventName passed to fireCrossOriginEvent. Cannot be empty or the single `*` character: "+t)):this.sendMessage(e.BROADCAST_CROSS_ORIGIN_EVENT,{eventName:t,info:i})}static addCallbackForGwNotificationType(e,t){if(this.gwNotificationListeners[e])throw new Error("Attempting to load multiple callbacks for notification type: "+e+". call removeCallbackBackForGWNotificationType first.");if(this.gwNotificationListeners["*"])throw new Error("Attempting to load a notification listener when their is already a * listener. New listener: "+e);this.gwNotificationListeners[e]=t}static removeCallbackForGwNotificationType(e){this.gwNotificationListeners[e]||console.warn("Attempting to remove a non existent notification listener for: "+e),delete this.gwNotificationListeners[e]}}return r})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,